name: .NET Workflow

on:
  push:
    branches: [main, develop]
    paths-ignore: ['**.md', '.github/ISSUE_TEMPLATE/**', '.github/pull_request_template.md']
  pull_request:
    paths-ignore: ['**.md', '.github/ISSUE_TEMPLATE/**', '.github/pull_request_template.md']
  schedule:
    - cron: "0 23 * * *"  # Daily at 11 PM UTC

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Default permissions
permissions: read-all

env:
  DOTNET_VERSION: '9.0'  # Only needed for actions/setup-dotnet

jobs:
  build:
    name: Build, Test & Release
    runs-on: windows-latest
    timeout-minutes: 15
    permissions:
      contents: write  # For creating releases and committing metadata
      packages: write  # For publishing packages

    outputs:
      version: ${{ steps.pipeline.outputs.version }}
      release_hash: ${{ steps.pipeline.outputs.release_hash }}
      should_release: ${{ steps.pipeline.outputs.should_release }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for versioning
        fetch-tags: true
        lfs: true
        submodules: recursive
        persist-credentials: true

    - name: Setup .NET SDK ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}.x
        cache: true
        cache-dependency-path: '**/*.csproj'

    - name: Run PSBuild Pipeline
      id: pipeline
      shell: pwsh
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Import the PSBuild module
        Import-Module ${{ github.workspace }}/scripts/PSBuild.psm1

        # Run the complete CI/CD pipeline
        $result = Invoke-CIPipeline `
          -GitRef "${{ github.ref }}" `
          -GitSha "${{ github.sha }}" `
          -WorkspacePath "${{ github.workspace }}" `
          -ServerUrl "${{ github.server_url }}" `
          -Owner "${{ github.repository_owner }}" `
          -Repository "${{ github.repository }}" `
          -GithubToken "${{ github.token }}" `
          -NuGetApiKey "${{ secrets.NUGET_KEY }}"

        # Set outputs for GitHub Actions
        "should_release=$($result.ShouldRelease)" >> $env:GITHUB_OUTPUT

        if ($result.ShouldRelease) {
            "version=$($result.Version)" >> $env:GITHUB_OUTPUT
            "release_hash=$($result.ReleaseHash)" >> $env:GITHUB_OUTPUT

            # Create artifacts directory
            New-Item -Path "artifacts" -ItemType Directory -Force | Out-Null
            Copy-Item -Path "output", "staging" -Destination "artifacts" -Recurse -Force
        }

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: ./coverage
        retention-days: 7

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: steps.pipeline.outputs.should_release == 'True'
      with:
        name: build-artifacts
        path: ./artifacts
        retention-days: 1

  security:
    name: Security Scanning
    needs: build
    if: needs.build.outputs.should_release == 'True'
    runs-on: windows-latest
    timeout-minutes: 10
    permissions:
      security-events: write  # For security scanning

    steps:
    - name: Checkout Release Commit
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.build.outputs.release_hash }}

    - name: Run Security Analysis
      uses: microsoft/security-devops-action@v1
      with:
        tools: credscan,roslyn

    - name: Detect Dependencies
      uses: advanced-security/component-detection-dependency-submission-action@v0.0.2
